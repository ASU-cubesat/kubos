//
// Copyright (C) 2018 Kubos Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

use super::*;
use rust_uart::mock::*;
use rust_uart::*;
use std::sync::mpsc::sync_channel;
use std::sync::{Arc, Mutex};
use std::thread;
use std::time::Duration;

#[macro_export]
macro_rules! mock_new {
    ($mock:ident) => {{
        let (log_send, log_recv) = sync_channel(5);
        let (response_send, response_recv) = sync_channel(5);

        let conn = Arc::new(Mutex::new(Connection {
            stream: Box::new($mock),
        }));
        let rx_conn = conn.clone();

        thread::spawn(move || read_thread(rx_conn, log_send, response_send));

        OEM6 {
            conn,
            log_recv,
            response_recv,
        }
    }};
}

// Simple test to make sure our mock objects are working as expected
#[test]
fn mock_test() {
    let mock = MockStream::default();

    let oem = mock_new!(mock);

    let packet: [u8; 40] = [0; 40];

    assert_eq!(
        oem.conn.lock().unwrap().write(&packet).unwrap_err(),
        UartError::GenericError
    );
}

#[test]
fn test_passthrough_bad() {
    let mock = MockStream::default();

    let oem = mock_new!(mock);

    let packet: [u8; 40] = [0; 40];

    assert_eq!(
        oem.passthrough(&packet).unwrap_err(),
        OEMError::UartError {
            cause: UartError::GenericError,
        }
    );
}

#[test]
fn test_passthrough_good() {
    let mut mock = MockStream::default();

    let packet: [u8; 4] = [0, 1, 2, 3];
    mock.write.set_input(packet.to_vec());

    let oem = mock_new!(mock);

    assert_eq!(oem.passthrough(&packet), Ok(()));
}

#[test]
fn test_request_version_good() {
    let mut mock = MockStream::default();

    mock.write.set_input(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x0, 0xC0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0,
        0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x8E, 0x33, 0x3C,
    ]);

    mock.read.set_output(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x80, 0x20, 0x6, 0x0, 0x0, 0x0, 0xFF, 0x78, 0xD1, 0xB,
        0x6E, 0x5D, 0xC9, 0x9, 0x0, 0x0, 0x0, 0x0, 0xFB, 0xFD, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4F,
        0x4B, 0x92, 0x8F, 0x77, 0x4A,
    ]);

    let oem = mock_new!(mock);

    assert_eq!(oem.request_version(), Ok(()));
}

#[test]
fn test_request_version_bad_no_response() {
    let mut mock = MockStream::default();

    mock.write.set_input(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x0, 0xC0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0,
        0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x8E, 0x33, 0x3C,
    ]);

    let oem = mock_new!(mock);

    assert_eq!(oem.request_version().unwrap_err(), OEMError::NoResponse);
}

#[test]
fn test_request_version_bad_response_crc() {
    let mut mock = MockStream::default();

    mock.write.set_input(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x0, 0xC0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0,
        0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x8E, 0x33, 0x3C,
    ]);

    mock.read.set_output(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x80, 0x20, 0x6, 0x0, 0x0, 0x0, 0xFF, 0x78, 0xD1, 0xB,
        0x6E, 0x5D, 0xC9, 0x9, 0x0, 0x0, 0x0, 0x0, 0xFB, 0xFD, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4F,
        0x4B, 0x92, 0x8F, 0x77, 0x4B,
    ]);

    let oem = mock_new!(mock);

    assert_eq!(oem.request_version().unwrap_err(), OEMError::NoResponse);
}

#[test]
fn test_request_version_fail_response() {
    let mut mock = MockStream::default();

    mock.write.set_input(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x0, 0xC0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0,
        0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x8E, 0x33, 0x3C,
    ]);

    mock.read.set_output(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x80, 0x20, 0x15, 0x0, 0x0, 0x0, 0xFF, 0x78, 0xD1, 0xB,
        0x6E, 0x5D, 0xC9, 0x9, 0x0, 0x0, 0x0, 0x0, 0xFB, 0xFD, 0x0, 0x0, 0x1F, 0x0, 0x0, 0x0, 0x4D,
        0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x64, 0x20, 0x6F, 0x75,
        0x74, 0xCB, 0xE5, 0x83, 0x92,
    ]);

    let oem = mock_new!(mock);

    assert_eq!(
        oem.request_version().unwrap_err(),
        OEMError::CommandError {
            id: ResponseID::Timeout,
            description: "Message timed out".to_owned(),
        }
    );
}
