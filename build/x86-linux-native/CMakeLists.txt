# NOTE: This file is generated by yotta: changes will be overwritten!

cmake_minimum_required(VERSION 2.8.11)

enable_testing()

# add a dummy target for all autogenerated tests, so we can build them all
# even though they are EXCLUDE_FROMALL'd, if you use custom CMakeLists you can
# add a dependency of this target on your test programs, by adding:
# add_dependencies(all_tests your_test_name)
add_custom_target(all_tests)


# always use the CMAKE_MODULE_PATH-provided .cmake files, even when including
# from system directories:
cmake_policy(SET CMP0017 OLD)

# toolchain file for x86-linux-native
set(CMAKE_TOOLCHAIN_FILE "/data/dev/openkosmosorg/kubos-core/build/x86-linux-native/toolchain.cmake")

# provide function for post-processing executables
function (yotta_postprocess_target target_type_ target_name_)
    if(COMMAND yotta_apply_target_rules)
        yotta_apply_target_rules(${target_type_} ${target_name_})
    endif()

    # For backwards compatibility, support YOTTA_POSTPROCESS_COMMAND.
    if(DEFINED YOTTA_POSTPROCESS_COMMAND AND ${target_type_} STREQUAL "EXECUTABLE")
        #message(AUTHOR_WARNING "This target defines a YOTTA_POSTPROCESS_COMMAND for which support has been deprecated. Please define a CMake function yotta_apply_target_rules(build_object_type build_object) instead.")
        string(REPLACE YOTTA_CURRENT_EXE_NAME "${target_name_}" LOCAL_POSTPROCESS_COMMAND "${YOTTA_POSTPROCESS_COMMAND}")
        separate_arguments(LOCAL_POSTPROCESS_COMMAND_SEPARATED UNIX_COMMAND ${LOCAL_POSTPROCESS_COMMAND})
        add_custom_command(
            TARGET ${target_name_}
            POST_BUILD
            COMMAND ${LOCAL_POSTPROCESS_COMMAND_SEPARATED}
        )
    endif()
endfunction()

# set target-defined definitions
set(YOTTA_BUILD_YEAR "2016") # UTC year
set(YOTTA_BUILD_MONTH "3") # UTC month 1-12
set(YOTTA_BUILD_DAY "31") # UTC day 1-31
set(YOTTA_BUILD_HOUR "15") # UTC hour 0-24
set(YOTTA_BUILD_MINUTE "53") # UTC minute 0-59
set(YOTTA_BUILD_SECOND "28") # UTC second 0-61
set(YOTTA_BUILD_UUID "5a954fa3-1c6e-48ee-9911-c2af1ebe0ff7") # unique random UUID for each build
set(YOTTA_BUILD_VCS_ID "ffd0a959debd797f45f949cfbbee24d31b92c849") # git or mercurial hash
set(YOTTA_BUILD_VCS_CLEAN "0") # evaluates true if the version control system was clean, otherwise false
set(YOTTA_BUILD_VCS_DESCRIPTION "ffd0a95") # git describe or mercurial equivalent
set(TARGET X86_LINUX_NATIVE)
set(TARGET_LIKE_X86_LINUX_NATIVE TRUE)
set(YOTTA_BUILD_INFO_HEADER "/data/dev/openkosmosorg/kubos-core/build/x86-linux-native/yotta_build_info.h")
set(TARGET_LIKE_X86_LINUX_NATIVE TRUE)
set(TARGET_LIKE_X86_64 TRUE)
set(TARGET_LIKE_X86 TRUE)
set(TARGET_LIKE_LINUX_NATIVE TRUE)
set(TARGET_LIKE_LINUX TRUE)
set(TARGET_LIKE_NATIVE TRUE)
set(TARGET_LIKE_POSIX TRUE)
set(TARGET_LIKE_USERLAND TRUE)
set(YOTTA_CFG TRUE)
set(YOTTA_CONFIG_MERGED_JSON_FILE "/data/dev/openkosmosorg/kubos-core/build/x86-linux-native/yotta_config.json")


project(kubos-core)

# Definitions provided by the target configuration info:
if(NOT DEFINED YOTTA_FORCE_INCLUDE_FLAG)
    # backwards-compatibility hack for ARMCC only: Do not add new compilers here!
    if("${CMAKE_C_COMPILER_ID}" STREQUAL "ARMCC")
        set(YOTTA_FORCE_INCLUDE_FLAG "--preinclude")
    else()
        set(YOTTA_FORCE_INCLUDE_FLAG "-include")
    endif()
endif()
add_definitions("${YOTTA_FORCE_INCLUDE_FLAG} \"/data/dev/openkosmosorg/kubos-core/build/x86-linux-native/yotta_config.h\"")

# include root directories of all components we depend on (directly and
# indirectly, including ourself)
include_directories("/data/dev/openkosmosorg/kubos-core")


# recurse into dependencies that aren't built elsewhere




# modules with custom CMake build systems may append to the
# YOTTA_GLOBAL_INCLUDE_DIRS property to add compile-time-determined include
# directories:
get_property(GLOBAL_INCLUDE_DIRS GLOBAL PROPERTY YOTTA_GLOBAL_INCLUDE_DIRS)
include_directories(${GLOBAL_INCLUDE_DIRS})

# Provide versions of all the components we depend on, the corresponding
# preprocessor definitions are generated in yotta_config.h
set(YOTTA_KUBOS_CORE_VERSION_STRING "0.0.0")
set(YOTTA_KUBOS_CORE_VERSION_MAJOR 0)
set(YOTTA_KUBOS_CORE_VERSION_MINOR 0)
set(YOTTA_KUBOS_CORE_VERSION_PATCH 0)

# provide the name of the current module so that it's available to custom CMake
# even if custom CMake does weird things with project()
set(YOTTA_MODULE_NAME kubos-core)

# recurse into subdirectories for this component, using the two-argument
# add_subdirectory because the directories referred to here exist in the source
# tree, not the working directory
add_subdirectory(
    "/data/dev/openkosmosorg/kubos-core/build/x86-linux-native/source"
    "${CMAKE_BINARY_DIR}/./source"
)

# make YOTTA_MODULE_NAME available as a preprocessor symbol when
# compiling this module:
target_compile_definitions(kubos-core PRIVATE "-DYOTTA_MODULE_NAME=kubos-core")

# include .cmake files provided by the target:
