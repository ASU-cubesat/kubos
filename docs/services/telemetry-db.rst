Telemetry Database Service
==========================

KubOS utilizes a `SQLite database <https://www.sqlite.org/about.html>`__ to store telemetry data generated by the
hardware and payload services until it is requested for transmission by the ground station.

SQLite only allows one process to make changes to a database at a time, so the telemetry database service acts as a 
single point of contact for interacting with the underlying telemetry database.

Interface Details
-----------------

Specific details about the available GraphQL queries can be found in the |telem-db| Rust docs.

 .. |telem-db| raw:: html
 
    <a href="../rust-docs/telemetry_service/index.html" target="_blank">telemetry database service</a>
    
Querying the Service
--------------------

The ``telemetry`` query can be used to fetch a certain selection of data from the telemetry database.
It will return an array of database entries.

The query has the following schema::

    query {
        telemetry(timestampGe: Integer, timestampLe: Integer, subsystem: String, parameter: String): [{
            timestamp: Integer!
            subsystem: String!
            parameter: String!
            value: Float!
        }]
    }
    
Each of the query arguments acts as a filter for the database query:

    - timestampGe - Return entries with timestamps occurring on or after the given value
    - timestampLe - Return entries with timestamps occurring on or before the given value
    - subsystem - Return entries which match the given subsystem name
    - parameter - Return entries which match the given parameter name
    
Note: ``timestampGe`` and ``timestampLe`` can be combined to create a timestamp selection range.
For example, entries with timestamps after ``1000``, but before ``5000``.

Saving Results for Later Processing
-----------------------------------

Sometimes we might want to periodically query the database for telemetry data, but not immediately use the results.

In this case, we can use the ``routedTelemetry`` query to write our results to an on-system file.

It has the following schema::

    query {
        telemetry(timestampGe: Integer, timestampLe: Integer, subsystem: String, parameter: String, output: String!): String! 
    }

The ``output`` argument specifies the output file to write the query results to.
The other arguments are the same as in the ``telemetry`` query.

The query will return a single field echoing the file that was written to.

The results file will contain an array of database entries in JSON format.
This matches the return fields of the ``telemetry`` query.

Adding Entries to the Database
------------------------------

The ``insert`` query can be used to add an entry to the telemetry database.

It has the following schema::

    mutation {
        insert(timestamp: Integer, subsystem: String!, parameter: String!, value: String!): {
            success: Boolean!,
            errors: String!
        }
    }
    
The ``timestamp`` argument is optional. If it is not specified, one will be generated based on the current system time.


    